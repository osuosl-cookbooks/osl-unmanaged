#!/usr/bin/python3
import json
import argparse
import os
import csv
import sys
import re
import ipaddress

# Parse whole openvpn/users.json file
# into seperate lists containing user details

# Lists:
used_client_ips       = []
used_client_usernames = []

# Open and load Databag item file
users_dbi = open("data_bags/openvpn/users.json", 'r+')

vpn_user_file_json  = json.load(users_dbi)

vpn_file_users_list = vpn_user_file_json['users']

# Add values to list
for user in vpn_file_users_list:
  used_client_usernames.append(user['username'])
  used_client_ips.append(user['client_ip'])

# Get user input about new vpn user, checking to make sure there are no
# conflicts

u_username     = input("Enter username: ")
for username in used_client_usernames:
  if u_username == username:
    print("WARNING: Username already in use")

# Give the user an IP:
# First, choose a subnet
valid = False
u_subnet = ""
while(not valid):
  u_subnet      = input("Enter IP subnet (1: staff, 2: other): ")
  if u_subnet == '1':
    valid = True
  elif u_subnet == '2':
    valid = True
  else:
    print("Invalid user ip")

# Depending on the subnet, find the next ip in the subnet that isn't being used
# already Done by generating a list of all ips in subnet, then checking if
# they're in the used_client_ips list

client_ip = ""
if u_subnet == '1':
  # List of IPs in subnet
  ip_range = list(ipaddress.ip_network('10.2.1.0/24').hosts())
  for possible_ip_address in ip_range:
    ip_taken = False
    # Checks if IP is already being used by a client
    for taken_ip_address in used_client_ips:
      taken_IPv4_address = ipaddress.ip_address(taken_ip_address)
      if taken_IPv4_address == possible_ip_address:
        ip_taken = True
        break
    if not ip_taken:
      client_ip = possible_ip_address
      break

# Same logic for both subnets
elif u_subnet == '2':
  ip_range = list(ipaddress.ip_network('10.2.2.0/24').hosts())
  for possible_ip_address in ip_range:
    ip_taken = False
    for taken_ip_address in used_client_ips:
      taken_IPv4_address = ipaddress.ip_address(taken_ip_address)
      if taken_IPv4_address == possible_ip_address:
        ip_taken = True
        break
    if not ip_taken:
      client_ip = possible_ip_address
      break
else:
  print("Error: Invalid subnet!")

# Final user json data
new_user_data = {
                  'username': u_username,
                  'client_ip': str(client_ip)
                }
new_user_formatted = json.dumps(new_user_data, indent=2)

# Confirm user to be written
print(new_user_formatted)
